// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using SportStore;
using System;

namespace SportStore.Migrations
{
    [DbContext(typeof(SportStoreDbContext))]
    [Migration("20180415111736_Alter_Mapping_Order_Receiver")]
    partial class Alter_Mapping_Order_Receiver
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SportStore.Models.Account", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.HasKey("ID");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("SportStore.Models.Cart", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AccountID");

                    b.HasKey("ID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("SportStore.Models.CartItem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CartID");

                    b.Property<int>("Count");

                    b.Property<int?>("ProductID");

                    b.Property<bool>("Selected");

                    b.HasKey("ID");

                    b.HasIndex("CartID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("SportStore.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SportStore.Models.Comment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AccountID");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int?>("ProductID");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ProductID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("SportStore.Models.Delivery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DeliveryNo");

                    b.Property<int>("OrderID");

                    b.Property<long?>("StatusID");

                    b.HasKey("ID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.HasIndex("StatusID");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("SportStore.Models.DeliveryStatus", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("DeliveryStatus");
                });

            modelBuilder.Entity("SportStore.Models.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProductID");

                    b.Property<string>("Url");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("SportStore.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<long?>("CustomerID");

                    b.Property<string>("PayMent");

                    b.Property<long>("ReceiverID");

                    b.Property<long?>("ShopID");

                    b.Property<long?>("StatusID");

                    b.Property<decimal>("TotalPrice");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("ShopID");

                    b.HasIndex("StatusID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SportStore.Models.OrderItem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<int?>("OrderID");

                    b.Property<decimal>("Price");

                    b.Property<int?>("ProductID");

                    b.Property<decimal>("TotalPrice");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("SportStore.Models.OrderStatus", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("SportStore.Models.Products", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryID");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<long?>("ShopID");

                    b.Property<int?>("StatusID");

                    b.Property<int>("Stocks");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ShopID");

                    b.HasIndex("StatusID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SportStore.Models.Receiver", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AccountID");

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("Receiver");
                });

            modelBuilder.Entity("SportStore.Models.Shop", b =>
                {
                    b.Property<long>("ID");

                    b.Property<bool>("Check");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Name");

                    b.Property<string>("Notice");

                    b.Property<float?>("ShopDiscount");

                    b.Property<int>("Status");

                    b.HasKey("ID");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("SportStore.Models.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("SportStore.Models.Administrator", b =>
                {
                    b.HasBaseType("SportStore.Models.Account");


                    b.ToTable("Administrator");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("SportStore.Models.Merchant", b =>
                {
                    b.HasBaseType("SportStore.Models.Account");


                    b.ToTable("Merchant");

                    b.HasDiscriminator().HasValue("Merchant");
                });

            modelBuilder.Entity("SportStore.Models.User", b =>
                {
                    b.HasBaseType("SportStore.Models.Account");


                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("SportStore.Models.Cart", b =>
                {
                    b.HasOne("SportStore.Models.Account", "Account")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("SportStore.Models.Cart", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportStore.Models.CartItem", b =>
                {
                    b.HasOne("SportStore.Models.Cart", "Cart")
                        .WithMany("Item")
                        .HasForeignKey("CartID");

                    b.HasOne("SportStore.Models.Products", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("SportStore.Models.Comment", b =>
                {
                    b.HasOne("SportStore.Models.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("AccountID");

                    b.HasOne("SportStore.Models.Products", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("SportStore.Models.Delivery", b =>
                {
                    b.HasOne("SportStore.Models.Order", "Order")
                        .WithOne("Delivery")
                        .HasForeignKey("SportStore.Models.Delivery", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportStore.Models.DeliveryStatus", "Status")
                        .WithMany("Deliverys")
                        .HasForeignKey("StatusID");
                });

            modelBuilder.Entity("SportStore.Models.Image", b =>
                {
                    b.HasOne("SportStore.Models.Products", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("SportStore.Models.Order", b =>
                {
                    b.HasOne("SportStore.Models.Account", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID");

                    b.HasOne("SportStore.Models.Receiver", "Receiver")
                        .WithMany("Orders")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportStore.Models.Shop", "Shop")
                        .WithMany("Orders")
                        .HasForeignKey("ShopID");

                    b.HasOne("SportStore.Models.OrderStatus", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusID");
                });

            modelBuilder.Entity("SportStore.Models.OrderItem", b =>
                {
                    b.HasOne("SportStore.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID");

                    b.HasOne("SportStore.Models.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("SportStore.Models.Products", b =>
                {
                    b.HasOne("SportStore.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportStore.Models.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopID");

                    b.HasOne("SportStore.Models.Status", "Status")
                        .WithMany("Products")
                        .HasForeignKey("StatusID");
                });

            modelBuilder.Entity("SportStore.Models.Receiver", b =>
                {
                    b.HasOne("SportStore.Models.Account", "Account")
                        .WithMany("Receivers")
                        .HasForeignKey("AccountID");
                });

            modelBuilder.Entity("SportStore.Models.Shop", b =>
                {
                    b.HasOne("SportStore.Models.Merchant", "Merchant")
                        .WithOne("Shop")
                        .HasForeignKey("SportStore.Models.Shop", "ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
